# Definiere das Docker-Image f√ºr den GitLab Runner

stages:
  - build
  - test
  - deploy
cache:
  paths:
    - frontend/node_modules/
    - backend/.venv/ 



# react_build:
#   stage: build
#   image: node:latest
#   script:
#     - cd frontend
#     - echo Installiere npm-packages
#     - npm install 
#     - echo Baue das Frontend
#     - CI=false npm run build

# react_test:
#  stage: test
#  script:
#    - cd frontend
#    - echo Installiere npm-packages
#    - npm install
#    - echo Teste das Frontend
#    - CI=false npm run test

# backend_build:
#   stage: build
#   image: python:latest
#   script:
#     - cd backend
#     - echo Baue das Backend
#     - pip install -r requirements.txt

# docker_build:
#   stage: build
#   image: docker:19.03.12-dind
#   variables:
#       DOCKER_HOST: tcp://docker:2375/
#       DOCKER_DRIVER: overlay2
#       DOCKER_TLS_CERTDIR: ""
#       DOCKER_COMPOSE_VERSION: '1.29.2'

  
#   before_script:
#     - apk add --no-cache docker-compose
#     #- docker info
#   script:
#     - cd ./
#     - echo building docker compose
#     - docker-compose build
#     - echo pushing docker compose
#     - docker-compose push
#   only:
#     - main
deploy_staging:
  image: ubuntu:latest
  stage: deploy
  
  before_script:
  - apt-get update -qq
  - apt-get install -qq git
  # Setup SSH deploy keys
  - 'which ssh-agent || ( apt-get install -qq openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh mindmachine@141.45.224.114 "cd ./mindmachine/ && git checkout main && git pull origin main && exit"



